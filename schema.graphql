type User {
  user_id: ID!
  name: String!
  company: String
  job_title: String
  cell_phone: String
  share_phone: Boolean
  email: String
  share_email: Boolean
  pin: Int
  initialized: Boolean
}

type ProfileAccess {
  PK: String!
  SK: String!
  timestamp: String!
}

type Query {
  getMyProfile: User
  getAgenda: AgendaData
}

input UpdateUserInput {
  company: String
  role: String
  pin: Int
  share_email: Boolean
  share_phone: Boolean
}

mutation UpdateUser($input: UpdateUserInput!) {
  updateUser(input: $input) {
    user_id
    short_id
    first_name
    last_name
    company
    role
    pin
  }
}

input AgendaDataInput {
  sessions: [SessionInput!]!
}

type AgendaData {
  sessions: [Session!]!
}

type Session {
  id: ID!
  roomId: ID!
  title: String!
  description: String
  startsAt: String!
  endsAt: String!
  isServiceSession: Boolean!
  isPlenumSession: Boolean!
  speakers: [Speaker!]!
  categories: [Category!]!
  room: Room!
  liveUrl: String
  recordingUrl: String
  status: SessionStatus
  isInformed: Boolean!
  isConfirmed: Boolean!
}

type Speaker {
  id: ID!
  name: String!
}

type Category {
  id: ID!
  name: String!
  categoryItems: [CategoryItem!]!
  sort: Int!
}

type CategoryItem {
  id: ID!
  name: String!
}

type Room {
  id: ID!
  name: String!
}

enum SessionStatus {
  Accepted
}

input SessionInput {
  id: ID!
  title: String!
  description: String
  startsAt: String!
  endsAt: String!
  isServiceSession: Boolean!
  isPlenumSession: Boolean!
  liveUrl: String
  recordingUrl: String
  status: SessionStatus
  isInformed: Boolean!
  isConfirmed: Boolean!
  room: RoomInput!
  speakers: [SpeakerInput!]!
  categories: [CategoryInput!]!
}

input RoomInput {
  id: ID!
  name: String!
}

input SpeakerInput {
  id: ID!
  name: String!
}

input CategoryInput {
  id: ID!
  name: String!
  categoryItems: [CategoryItemInput!]!
  sort: Int!
}

input CategoryItemInput {
  id: ID!
  name: String!
}

type Subscription {
  onAgendaUpdate: AgendaData @aws_subscribe(mutations: ["updateAgenda"])
  onRoomAgendaUpdate(roomId: ID!): Session @aws_subscribe(mutations: ["updateRoomAgenda"])
}

type Mutation {
  viewProfile(id: String!, pin: String!): User
  updateUser(input: UpdateUserInput!): User
  updateAgenda(data: AgendaDataInput!): AgendaData
  updateRoomAgenda(roomId: ID!, session: SessionInput!): Session
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
