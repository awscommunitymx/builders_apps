type User {
  user_id: ID!
  name: String!
  company: String
  job_title: String
  cell_phone: String
  share_phone: Boolean
  email: String
  share_email: Boolean
  pin: Int
  initialized: Boolean
}

type ProfileAccess {
  PK: String!
  SK: String!
  timestamp: String!
}

type Query {
  getMyProfile: User
  getAgenda: AgendaData
  getRoomAgenda(location: String!): RoomAgendaData
  getAgendaHash: String!
  getRoomAgendaHash(location: String!): String!
}

input UpdateUserInput {
  company: String
  role: String
  pin: Int
  share_email: Boolean
  share_phone: Boolean
}

input AgendaDataInput {
  sessions: [SessionInput!]!
}

type AgendaData 
@aws_api_key
@aws_cognito_user_pools
{
  sessions: [Session!]!
}

type RoomAgendaData 
@aws_api_key
@aws_cognito_user_pools
{
  location: String!
  sessions: [Session!]!
}

input SessionInput {
  id: ID!
  name: String
  description: String
  extendedDescription: String
  speakers: [SpeakerInput]
  time: String!
  dateStart: String!
  dateEnd: String!
  duration: Int
  location: String
  nationality: String
  level: String
  language: String
  category: String
  capacity: Int
  status: String
  liveUrl: String
  recordingUrl: String
}

type Session 
@aws_api_key
@aws_cognito_user_pools
{
  id: ID!
  name: String
  description: String
  extendedDescription: String
  speakers: [Speaker]
  time: String!
  dateStart: String!
  dateEnd: String!
  duration: Int
  location: String
  nationality: String
  level: String
  language: String
  category: String
  capacity: Int
  status: String
  liveUrl: String
  recordingUrl: String
}

input SpeakerInput {
  id: ID
  name: String!
  avatarUrl: String
  company: String
  bio: String
  nationality: String
  socialMedia: SocialMediaInput
}

type Speaker 
@aws_api_key
@aws_cognito_user_pools
{
  id: ID
  name: String!
  avatarUrl: String
  company: String
  bio: String
  nationality: String
  socialMedia: SocialMedia
}

type SocialMedia 
@aws_api_key
@aws_cognito_user_pools
{
  twitter: String
  linkedin: String
  company: String
}

input SocialMediaInput {
  twitter: String
  linkedin: String
  company: String
}

type Subscription {
  onRoomAgendaUpdate(location: String!): RoomAgendaData 
    @aws_subscribe(mutations: ["updateRoomAgenda"])
}

type Mutation {
  viewProfile(id: String!, pin: String!): User
  updateUser(input: UpdateUserInput!): User
  updateRoomAgenda(location: String!, sessions: AgendaDataInput!): RoomAgendaData 
    @aws_api_key
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
