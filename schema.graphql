type User {
  user_id: ID!
  short_id: String!
  first_name: String
  last_name: String
  company: String
  role: String
  pin: Int
}

type ProfileAccess {
  PK: String!
  SK: String!
  viewer_id: String!
  viewed_id: String!
  timestamp: String!
}

type Query {
  getUserByShortId(shortId: String!): User
  getProfileAccesses(userId: ID!): [ProfileAccess]
}

input UpdateUserInput {
  userId: ID!
  firstName: String
  lastName: String
  company: String
  role: String
  pin: Int
}

type Mutation {
  viewProfile(shortId: String!, pin: Int!, viewerId: ID!): User
  updateUser(input: UpdateUserInput!): User
}

schema {
  query: Query
  mutation: Mutation
}

type  AgendaData {
  sessions: [Session!]!
}

type  Session {
  id: ID!
  title: String!
  description: String!
  startsAt: String!
  endsAt: String!
  isServiceSession: Boolean!
  isPlenumSession: Boolean!
  speakers: [Speaker!]!
  categories: [Category!]!
  room: Room!
  liveUrl: String
  recordingUrl: String
  status: SessionStatus!
  isInformed: Boolean!
  isConfirmed: Boolean!
}

type  Speaker {
  id: ID!
  name: String!
}

type  Category {
  id: ID!
  name: String!
  categoryItems: [CategoryItem!]!
  sort: Int!
}

type  CategoryItem {
  id: ID!
  name: String!
}

type Room {
  id: ID!
  name: String!
}

enum SessionStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}
