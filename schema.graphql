type User {
  user_id: ID!
  name: String!
  company: String
  job_title: String
  cell_phone: String
  share_phone: Boolean
  email: String
  share_email: Boolean
  pin: Int
  initialized: Boolean
  short_id: String
  ticket_class_id: String
}

type SponsorUser {
  user_id: ID!
  name: String!
  company: String
  job_title: String
  cell_phone: String
  email: String
  short_id: String
  message: String
  last_visit: String
}

type ProfileAccess {
  PK: String!
  SK: String!
  timestamp: String!
}

type SponsorDashboard {
  sponsor_name: String!
  visits: [SponsorUser!]!
  total_visits: Int!
}

type Query {
  getMyProfile: User
  @aws_auth(cognito_groups: ["Attendees"])
  getSponsorVisit(short_id: ID!): SponsorUser
  @aws_auth(cognito_groups: ["Sponsors"])
  getSponsorDashboard: SponsorDashboard!
  @aws_auth(cognito_groups: ["Sponsors"])
}

input UpdateUserInput {
  company: String
  role: String
  pin: Int
  share_email: Boolean
  share_phone: Boolean
}

input RegisterSponsorVisitInput {
  short_id: ID!
  message: String
}

type CheckInResponse {
  status: CheckInStatus!
  message: String
  missingFields: [String]
  user: User
}

enum CheckInStatus {
  SUCCESS
  INCOMPLETE_PROFILE
}

type Mutation {
  viewProfile(id: String!, pin: String!): User
  @aws_auth(cognito_groups: ["Attendees"])
  updateUser(input: UpdateUserInput!): User
  @aws_auth(cognito_groups: ["Attendees"])
  registerSponsorVisit(input: RegisterSponsorVisitInput!): SponsorUser
  @aws_auth(cognito_groups: ["Attendees"])
  checkInAttendee(
    barcode_id: ID
    user_id: ID
    bypass_email: Boolean
    bypass_phone: Boolean
    email: String
    phone: String
  ): CheckInResponse!
  @aws_auth(cognito_groups: ["CheckInVolunteerMain1", "CheckInVolunteerMain2", "CheckInVolunteerMain3", "CheckInVolunteerMain4", "CheckInVolunteerSecondary"])
}

schema {
  query: Query
  mutation: Mutation
}

type AgendaData {
  sessions: [Session!]!
}

type Session {
  id: ID!
  title: String!
  description: String!
  startsAt: String!
  endsAt: String!
  isServiceSession: Boolean!
  isPlenumSession: Boolean!
  speakers: [Speaker!]!
  categories: [Category!]!
  room: Room!
  liveUrl: String
  recordingUrl: String
  status: SessionStatus!
  isInformed: Boolean!
  isConfirmed: Boolean!
}

type Speaker {
  id: ID!
  name: String!
}

type Category {
  id: ID!
  name: String!
  categoryItems: [CategoryItem!]!
  sort: Int!
}

type CategoryItem {
  id: ID!
  name: String!
}

type Room {
  id: ID!
  name: String!
}

enum SessionStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}
