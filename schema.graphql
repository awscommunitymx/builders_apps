type User {
  user_id: ID!
  name: String!
  company: String
  job_title: String
  cell_phone: String
  share_phone: Boolean
  email: String
  share_email: Boolean
  pin: Int
  initialized: Boolean
  short_id: String
  ticket_class_id: String
  sponsor_visits: [String!]
}

type SponsorUser {
  user_id: ID!
  name: String!
  company: String
  job_title: String
  cell_phone: String
  email: String
  short_id: String
  message: String
  last_visit: String
}

type ProfileAccess {
  PK: String!
  SK: String!
  timestamp: String!
}

type SponsorDashboard {
  sponsor_name: String!
  visits: [SponsorUser!]!
  total_visits: Int!
}

type Query 
  @aws_cognito_user_pools
  @aws_api_key
{
  getMyProfile: User
  @aws_auth(cognito_groups: ["Attendees"])
  getAgenda: AgendaData
  getRoomAgenda(location: String!): RoomAgendaData
  getAgendaHash: String!
  getRoomAgendaHash(location: String!): String!
  getSponsorVisit(short_id: ID!): SponsorUser
  @aws_auth(cognito_groups: ["Sponsors"])
  getSponsorDashboard: SponsorDashboard!
  @aws_auth(cognito_groups: ["Sponsors"])
}

input UpdateUserInput {
  company: String
  role: String
  pin: Int
  share_email: Boolean
  share_phone: Boolean
}

input AgendaDataInput {
  sessions: [SessionInput!]!
}

type AgendaData 
@aws_api_key
@aws_cognito_user_pools
{
  sessions: [Session!]!
}

type RoomAgendaData 
@aws_api_key
@aws_cognito_user_pools
{
  location: String!
  sessions: [Session!]!
}

input SessionInput {
  id: ID!
  name: String
  description: String
  extendedDescription: String
  speakers: [SpeakerInput]
  time: String!
  dateStart: String!
  dateEnd: String!
  duration: Int
  location: String
  nationality: String
  level: String
  language: String
  category: String
  capacity: Int
  status: String
  liveUrl: String
  recordingUrl: String
}

type Session 
@aws_api_key
@aws_cognito_user_pools
{
  id: ID!
  name: String
  description: String
  extendedDescription: String
  speakers: [Speaker]
  time: String!
  dateStart: String!
  dateEnd: String!
  duration: Int
  location: String
  nationality: String
  level: String
  language: String
  category: String
  capacity: Int
  status: String
  liveUrl: String
  recordingUrl: String
}

input SpeakerInput {
  id: ID
  name: String!
  avatarUrl: String
  company: String
  bio: String
  nationality: String
  socialMedia: SocialMediaInput
}

type Speaker 
@aws_api_key
@aws_cognito_user_pools
{
  id: ID
  name: String!
  avatarUrl: String
  company: String
  bio: String
  nationality: String
  socialMedia: SocialMedia
}

type SocialMedia 
@aws_api_key
@aws_cognito_user_pools
{
  twitter: String
  linkedin: String
  company: String
}

input SocialMediaInput {
  twitter: String
  linkedin: String
  company: String
}

input RegisterSponsorVisitInput {
  short_id: ID!
  message: String
}

input SessionCSATInput {
  sessionId: ID!
  rating: Int!
  feedback: String
}

type CheckInResponse {
  status: CheckInStatus!
  message: String
  missingFields: [String]
  user: User
}

type SessionCSATResponse {
  success: Boolean!
  message: String!
}

enum CheckInStatus {
  SUCCESS
  INCOMPLETE_PROFILE
}

type Subscription {
  onAgendaUpdate: AgendaData
    @aws_subscribe(mutations: ["updateAgenda"])
  onRoomAgendaUpdate(location: String!): RoomAgendaData 
    @aws_subscribe(mutations: ["updateRoomAgenda"])
}

type Mutation {
  viewProfile(id: String!, pin: String!): User
  @aws_auth(cognito_groups: ["Attendees"])
  updateUser(input: UpdateUserInput!): User
  @aws_auth(cognito_groups: ["Attendees"])
  updateAgenda(sessions: AgendaDataInput!): AgendaData 
  @aws_api_key
  updateRoomAgenda(location: String!, sessions: AgendaDataInput!): RoomAgendaData 
  @aws_api_key
  registerSponsorVisit(input: RegisterSponsorVisitInput!): SponsorUser
  @aws_auth(cognito_groups: ["Attendees"])
  checkInAttendee(
    barcode_id: ID
    user_id: ID
    bypass_email: Boolean
    bypass_phone: Boolean
    email: String
    phone: String
  ): CheckInResponse!
  @aws_auth(cognito_groups: ["CheckInVolunteerMain1", "CheckInVolunteerMain2", "CheckInVolunteerMain3", "CheckInVolunteerMain4", "CheckInVolunteerSecondary"])
  submitSessionCSAT(input: SessionCSATInput!): SessionCSATResponse!
  @aws_auth(cognito_groups: ["Attendees"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
