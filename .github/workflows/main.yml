name: PR Deployment and Comment

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

env:
  AWS_REGION: "us-east-1"

# Required permissions for OIDC authentication and GitHub API
permissions:
  id-token: write
  contents: read
  pull-requests: write  # Permiso para comentar en PRs

jobs:
  # Job for PR opened/reopened/synchronized events
  DeployPR:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          check-latest: true
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_PR_Deployment
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install project dependencies
        run: |
          npm ci || npm install
          
      - name: Run deployment script
        id: deploy
        run: |
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh

          SANITIZED_BRANCH=$(echo ${{ github.ref_headÂ }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
          
          API_URL=$(aws cloudformation describe-stacks --stack-name "ProfilesStack-$(echo $SANITIZED_BRANCH | tr '/' '-')" --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue"Â --outputÂ text)          
          
          # Guardar la URL como un output del paso para usarlo despuÃ©s
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const apiUrl = '${{ steps.deploy.outputs.api_url }}';
            if (!apiUrl) {
              console.log('No API URL found, skipping PR comment');
              return;
            }
            
            const prNumber = context.issue.number;
            const repo = context.repo;
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.name,
              issue_number: prNumber,
              body: `âœ… Deployment successful!\n\n**Environment:** \`${{ github.head_ref }}\`\n**API URL:** [${apiUrl}](${apiUrl})\n\nThis environment will be automatically destroyed when the PR is closed.`
            });

  # Job for PR closed events
  CleanupPR:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          check-latest: true
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_PR_Cleanup
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install project dependencies
        run: |
          npm ci || npm install
          
      - name: Run cleanup script
        run: |
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh --destroy
          
      - name: Comment PR cleanup
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const repo = context.repo;
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.name,
              issue_number: prNumber,
              body: `ðŸ§¹ Environment for branch \`${{ github.head_ref }}\` has been successfully cleaned up and destroyed.`
            });
