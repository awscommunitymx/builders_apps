name: CDK Deployment

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Skip job on PR close event unless we need to destroy resources
    if: github.event.action != 'closed' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          
      - name: Determine environment name
        id: env-name
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "ENV_NAME=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "EPHEMERAL=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
            echo "EPHEMERAL=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
            echo "EPHEMERAL=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
            echo "EPHEMERAL=false" >> $GITHUB_OUTPUT
          else
            # Get branch name and sanitize for use as environment name
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
            echo "ENV_NAME=br-$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
            echo "EPHEMERAL=true" >> $GITHUB_OUTPUT
          fi
          
      - name: CDK Deploy
        if: github.event.action != 'closed'
        run: |
          echo "Deploying to environment: ${{ steps.env-name.outputs.ENV_NAME }}"
          npx cdk deploy --require-approval never \
            --context env=${{ steps.env-name.outputs.ENV_NAME }} \
            --context region=${{ vars.AWS_REGION || 'us-east-1' }} \
            "ProfilesStack-${{ steps.env-name.outputs.ENV_NAME }}"
            
      - name: CDK Destroy
        if: github.event.action == 'closed' && steps.env-name.outputs.EPHEMERAL == 'true'
        run: |
          echo "Destroying ephemeral environment: ${{ steps.env-name.outputs.ENV_NAME }}"
          npx cdk destroy --force \
            --context env=${{ steps.env-name.outputs.ENV_NAME }} \
            --context region=${{ vars.AWS_REGION || 'us-east-1' }} \
            "ProfilesStack-${{ steps.env-name.outputs.ENV_NAME }}"
            
      - name: Output Stack Information
        if: success() && github.event.action != 'closed'
        run: |
          # Extract and display the GraphQL API URL and other important outputs
          API_URL=$(aws cloudformation describe-stacks --stack-name "ProfilesStack-${{ steps.env-name.outputs.ENV_NAME }}" --query "Stacks[0].Outputs[?OutputKey=='ApiStackGraphQLApiUrlE27CCC1E'].OutputValue" --output text)
          echo "GraphQL API URL: $API_URL"
          echo "Environment: ${{ steps.env-name.outputs.ENV_NAME }}"