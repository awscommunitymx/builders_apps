name: PR Deployment and Comment

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

env:
  AWS_REGION: 'us-east-1'

# Required permissions for OIDC authentication and GitHub API
permissions:
  id-token: write
  contents: read
  pull-requests: write # Permiso para comentar en PRs

jobs:
  # Job for running tests
  TestPR:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          check-latest: true

      - name: Install project dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  # Job for PR opened/reopened/synchronized events
  DeployPR:
    needs: TestPR
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          check-latest: true

      - name: Install project dependencies
        run: |
          npm ci || npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_PR_Deployment
          aws-region: ${{ env.AWS_REGION }}

      - name: Run deployment script
        id: deploy
        run: |
          SANITIZED_BRANCH=$(echo ${{ github.head_ref }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
          SANITIZED_BRANCH="dev-$SANITIZED_BRANCH"
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh --deploy-frontend -e $SANITIZED_BRANCH

          APP_URL=$(aws cloudformation describe-stacks --stack-name "ProfilesStackFrontend-$(echo $SANITIZED_BRANCH | tr '/' '-')" --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" --output text)          

          # Guardar la URL como un output del paso para usarlo despuÃ©s
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v7
        name: Comment on PR
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const appUrl = "${{ steps.deploy.outputs.app_url }}" || 'URL unavailable';

            // Check for existing comments with the URL
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Create the comment message
            const commentMessage = `> [!TIP]\n> ğŸš€ The application is deployed and available at: ${appUrl}`;

            // Look for an existing deployment comment by our bot that contains our specific message format
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('The application is deployed and available at:')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentMessage
              });
              console.log("Updated existing deployment comment");
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentMessage
              });
              console.log("Created new deployment comment");
            }

  # Job for PR closed events
  CleanupPR:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          check-latest: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_PR_Cleanup
          aws-region: ${{ env.AWS_REGION }}

      - name: Install project dependencies
        run: |
          npm ci || npm install

      - name: Run cleanup script
        run: |
          SANITIZED_BRANCH=$(echo ${{ github.head_ref }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
          SANITIZED_BRANCH="dev-$SANITIZED_BRANCH"
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh -e $SANITIZED_BRANCH --destroy

      - name: Comment PR cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `> [!NOTE]\n> ğŸ§¹ Environment for branch \`${{ github.head_ref }}\` has been successfully cleaned up and destroyed.`
            });
